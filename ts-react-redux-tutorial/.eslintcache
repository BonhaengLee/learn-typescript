[{"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\App.tsx":"1","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\containers\\CounterContainer.tsx":"2","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\components\\Counter.tsx":"3","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\index.tsx":"4","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\modules\\index.ts":"5","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\modules\\counter.ts":"6","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\components\\Counter2.tsx":"7","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\hooks\\useCounter.tsx":"8"},{"size":574,"mtime":1609276764801,"results":"9","hashOfConfig":"10"},{"size":959,"mtime":1609279147278,"results":"11","hashOfConfig":"10"},{"size":939,"mtime":1609279130764,"results":"12","hashOfConfig":"10"},{"size":585,"mtime":1609237353014,"results":"13","hashOfConfig":"10"},{"size":615,"mtime":1609279035563,"results":"14","hashOfConfig":"10"},{"size":1499,"mtime":1609279076212,"results":"15","hashOfConfig":"10"},{"size":688,"mtime":1609279925179,"results":"16","hashOfConfig":"10"},{"size":1125,"mtime":1609278757722,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1tho8m4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\App.tsx",[],[],"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\containers\\CounterContainer.tsx",[],"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\components\\Counter.tsx",[],"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\index.tsx",[],"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\modules\\index.ts",[],"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\modules\\counter.ts",["36","37","38","39"],"// #: 리덕스 모듈 작성\n// NOTE: 액션 type 선언\nconst INCREASE = 'counter/INCREASE' as const;\nconst DECREASE = 'counter/DECREASE' as const;\nconst INCREASE_BY = 'counter/INCREASE_BY' as const;\n\n// NOTE: 액션 생성 함수 선언\n// return 생략할 수 있어서 화살표 함수 이용\nexport const increase = () => ({ type: INCREASE });\nexport const decrease = () => ({ type: DECREASE });\nexport const increaseBy = (diff: number) => ({\n  type: INCREASE_BY,\n  payload: diff,\n});\n\n/* NOTE: 액션 객체들에 대한 type 준비하기\n * ReturnType은 함수에서 반환하는 타입을 가져올 수 있게 해주는 유틸 타입 */\ntype CounterAction =\n  | ReturnType<typeof increase>\n  | ReturnType<typeof decrease>\n  | ReturnType<typeof increaseBy>;\n\n// NOTE: 상태의 타입과 상태의 초깃값 선언하기\n// 리덕스의 상태의 타입을 선언할 때는 type or interface\ntype CounterState = {\n  count: number;\n};\n\nconst initialState: CounterState = {\n  count: 0,\n};\n\n// NOTE: 리듀서 작성하기, useReducer와 비슷하다.\n// 함수의 반환 타입에 상태의 타입을 넣는 것을 잊지 마라\nfunction counter(state: CounterState = initialState, action: CounterAction) {\n  switch (action.type) {\n    case INCREASE:\n      return { count: state.count + 1 };\n    case DECREASE:\n      return { count: state.count - 1 };\n    case INCREASE_BY:\n      return { count: state.count + action.payload };\n    default:\n      return state;\n  }\n}\n\nexport default counter;\n","D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\components\\Counter2.tsx",["40"],"D:\\react-exercise\\ts_projects\\learn-typescript\\ts-react-redux-tutorial\\src\\hooks\\useCounter.tsx",["41"],{"ruleId":"42","severity":1,"message":"43","line":9,"column":25,"nodeType":"44","messageId":"45","endLine":9,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":10,"column":25,"nodeType":"44","messageId":"45","endLine":10,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":11,"column":27,"nodeType":"44","messageId":"45","endLine":11,"endColumn":44},{"ruleId":"42","severity":1,"message":"43","line":35,"column":1,"nodeType":"46","messageId":"45","endLine":35,"endColumn":76},{"ruleId":"42","severity":1,"message":"43","line":8,"column":16,"nodeType":"46","messageId":"45","endLine":8,"endColumn":35},{"ruleId":"42","severity":1,"message":"43","line":11,"column":1,"nodeType":"46","messageId":"45","endLine":11,"endColumn":22},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration"]